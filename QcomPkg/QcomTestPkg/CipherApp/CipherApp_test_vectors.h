#ifndef CIPHER_APP_TEST_VECTORS_H
#define CIPHER_APP_TEST_VECTORS_H
/** @file 
                    CipherApp_test_vectors.h
   
  CipherApp is responsible for testing CipherDxe.

  Copyright (c) 2018, 2019 Qualcomm Technologies, Inc.  All Rights Reserved.
  Qualcomm Technologies Proprietary and Confidential.

**/

/*=============================================================================
                              EDIT HISTORY
  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.



 when       who      what, where, why
 --------   ---     ---------------------------------------------------------
 02/22/19   jp      Added tests using CipherSeviceBinding Protocol and CeML API
 03/30/18   jp      Initial version

=============================================================================*/
#include <stdint.h>
#include <Uefi.h>
#include <api/securemsm/CeML.h>

/* AES-128 ECB test vectors */
uint8_t aes128_plain_text_ECB[] = {
  0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

uint8_t aes128_key_ECB[] = {
  0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2,	0xa6,
  0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

uint8_t aes128_cipher_text_ECB[] = {
  0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60,
  0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97
};

/* AES-256 ECB test vectors */
uint8_t aes256_plain_text_ECB[] ={
  0x06, 0x9A, 0x00, 0x7F, 0xC7, 0x6A, 0x45, 0x9F,
  0x98, 0xBA, 0xF9, 0x17, 0xFE, 0xDF, 0x95, 0x21
};

uint8_t aes256_key_ECB[] ={
  0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10,
  0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1A,
  0x1C, 0x1D, 0x1E, 0x1F, 0x21, 0x22, 0x23, 0x24,
  0x26, 0x27, 0x28, 0x29, 0x2B, 0x2C, 0x2D, 0x2E
};

uint8_t aes256_cipher_text_ECB[] ={
  0x08, 0x0e, 0x95, 0x17, 0xeb, 0x16, 0x77, 0x71,
  0x9a, 0xcf, 0x72, 0x80, 0x86, 0x04, 0x0a, 0xe3
};

/* AES-128 CBC test vectors */
UINT8 aes128_plain_text_CBC[] =
{
  0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

UINT8 aes128_key_CBC[] =
{
  0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
  0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

UINT8 aes128_iv_CBC[] =
{
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

UINT8 aes128_cipher_text_CBC[] =
{
  0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46,
  0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d
};

/* AES-256 CBC test vectors */
UINT8 aes256_plain_text_CBC[] =
{
  0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

UINT8 aes256_key_CBC[] =
{
  0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
  0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
  0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

UINT8 aes256_iv_CBC[] =
{
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

UINT8 aes256_cipher_text_CBC[] =
{
  0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba,
  0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6
};

/* AES-128 CTR test vectors */
UINT8 aes128_plain_text_CTR[] =
{
  0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

UINT8 aes128_key_CTR[] =
{
  0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
  0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

UINT8 aes128_iv_CTR[] =
{
  0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

UINT8 aes128_cipher_text_CTR[] =
{
  0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26,
  0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce
};

/* AES-256 CTR test vectors */
UINT8 aes256_plain_text_CTR[] =
{
  0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

UINT8 aes256_key_CTR[] =
{
  0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
  0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
  0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

UINT8 aes256_iv_CTR[] =
{
  0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

UINT8 aes256_cipher_text_CTR[] =
{
  0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5,
  0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28
};

typedef struct{
  EFI_GUID     *AlgoGuid;
  EFI_GUID     *ModeGuid;
  UINT8        *pt;
  UINTN        pt_len;
  UINT8        *key;
  UINTN        key_len;
  UINT8        *iv;
  UINTN        iv_len;
  UINT8        *ct;
} uefi_aes_test_vector_type;

uefi_aes_test_vector_type uefi_aes_test_vectors[] = {
  {&gEfiCipherAlgorithmAES128Guid, &gEfiCipherModeECBGuid,
  aes128_plain_text_ECB, sizeof(aes128_plain_text_ECB),
  aes128_key_ECB, sizeof(aes128_key_ECB),
  NULL, 0,
  aes128_cipher_text_ECB}
  ,
  {&gEfiCipherAlgorithmAES256Guid, &gEfiCipherModeECBGuid,
  aes256_plain_text_ECB, sizeof(aes256_plain_text_ECB),
  aes256_key_ECB, sizeof(aes256_key_ECB),
  NULL, 0,
  aes256_cipher_text_ECB}
  ,
  {&gEfiCipherAlgorithmAES128Guid, &gEfiCipherModeCBCGuid,
  aes128_plain_text_CBC, sizeof(aes128_plain_text_CBC),
  aes128_key_CBC, sizeof(aes128_key_CBC),
  aes128_iv_CBC, sizeof(aes128_iv_CBC),
  aes128_cipher_text_CBC}
  ,
  {&gEfiCipherAlgorithmAES256Guid, &gEfiCipherModeCBCGuid,
  aes256_plain_text_CBC, sizeof(aes256_plain_text_CBC),
  aes256_key_CBC, sizeof(aes256_key_CBC),
  aes256_iv_CBC, sizeof(aes256_iv_CBC),
  aes256_cipher_text_CBC}
  ,
  {&gEfiCipherAlgorithmAES128Guid, &gEfiCipherModeCTRGuid,
  aes128_plain_text_CTR, sizeof(aes128_plain_text_CTR),
  aes128_key_CTR, sizeof(aes128_key_CTR),
  aes128_iv_CTR, sizeof(aes128_iv_CTR),
  aes128_cipher_text_CTR}
  ,
  {&gEfiCipherAlgorithmAES256Guid, &gEfiCipherModeCTRGuid,
  aes256_plain_text_CTR, sizeof(aes256_plain_text_CTR),
  aes256_key_CTR, sizeof(aes256_key_CTR),
  aes256_iv_CTR, sizeof(aes256_iv_CTR),
  aes256_cipher_text_CTR}
  ,
  {&gEfiCipherAlgorithmAES128Guid, &gEfiCipherModeCTSGuid,
  aes128_plain_text_CBC, sizeof(aes128_plain_text_CBC),
  aes128_key_CBC, sizeof(aes128_key_CBC),
  aes128_iv_CBC, sizeof(aes128_iv_CBC),
  aes128_cipher_text_CBC}
  ,
  {&gEfiCipherAlgorithmAES256Guid, &gEfiCipherModeCTSGuid,
  aes256_plain_text_CBC, sizeof(aes256_plain_text_CBC),
  aes256_key_CBC, sizeof(aes256_key_CBC),
  aes256_iv_CBC, sizeof(aes256_iv_CBC),
  aes256_cipher_text_CBC}
};

/* CeML Cipher Test Vectors */
typedef struct{
  CeMLCipherAlgType  Algo;
  CeMLCipherModeType Mode;
  UINT8        *pt;
  UINTN        pt_len;
  UINT8        *key;
  UINTN        key_len;
  UINT8        *iv;
  UINTN        iv_len;
  UINT8        *ct;
} CeML_aes_test_vector_type;

CeML_aes_test_vector_type CeML_aes_test_vectors[] = {
  {CEML_CIPHER_ALG_AES128, CEML_CIPHER_MODE_ECB,
  aes128_plain_text_ECB, sizeof(aes128_plain_text_ECB),
  aes128_key_ECB, sizeof(aes128_key_ECB),
  NULL, 0,
  aes128_cipher_text_ECB}
  ,
  {CEML_CIPHER_ALG_AES256, CEML_CIPHER_MODE_ECB,
  aes256_plain_text_ECB, sizeof(aes256_plain_text_ECB),
  aes256_key_ECB, sizeof(aes256_key_ECB),
  NULL, 0,
  aes256_cipher_text_ECB}
  ,
  {CEML_CIPHER_ALG_AES128, CEML_CIPHER_MODE_CBC,
  aes128_plain_text_CBC, sizeof(aes128_plain_text_CBC),
  aes128_key_CBC, sizeof(aes128_key_CBC),
  aes128_iv_CBC, sizeof(aes128_iv_CBC),
  aes128_cipher_text_CBC}
  ,
  {CEML_CIPHER_ALG_AES256, CEML_CIPHER_MODE_CBC,
  aes256_plain_text_CBC, sizeof(aes256_plain_text_CBC),
  aes256_key_CBC, sizeof(aes256_key_CBC),
  aes256_iv_CBC, sizeof(aes256_iv_CBC),
  aes256_cipher_text_CBC}
  ,
  {CEML_CIPHER_ALG_AES128, CEML_CIPHER_MODE_CTR,
  aes128_plain_text_CTR, sizeof(aes128_plain_text_CTR),
  aes128_key_CTR, sizeof(aes128_key_CTR),
  aes128_iv_CTR, sizeof(aes128_iv_CTR),
  aes128_cipher_text_CTR}
  ,
  {CEML_CIPHER_ALG_AES256, CEML_CIPHER_MODE_CTR,
  aes256_plain_text_CTR, sizeof(aes256_plain_text_CTR),
  aes256_key_CTR, sizeof(aes256_key_CTR),
  aes256_iv_CTR, sizeof(aes256_iv_CTR),
  aes256_cipher_text_CTR}
  ,
  {CEML_CIPHER_ALG_AES128, CEML_CIPHER_MODE_CTS,
  aes128_plain_text_CBC, sizeof(aes128_plain_text_CBC),
  aes128_key_CBC, sizeof(aes128_key_CBC),
  aes128_iv_CBC, sizeof(aes128_iv_CBC),
  aes128_cipher_text_CBC}
  ,
  {CEML_CIPHER_ALG_AES256, CEML_CIPHER_MODE_CTS,
  aes256_plain_text_CBC, sizeof(aes256_plain_text_CBC),
  aes256_key_CBC, sizeof(aes256_key_CBC),
  aes256_iv_CBC, sizeof(aes256_iv_CBC),
  aes256_cipher_text_CBC}
};


/* AES GCM test vectors */
#define MAX_TESTS   6

UINT8 key_index_gcm[MAX_TESTS] =
{
   0, 0, 1, 1, 1, 1
};

UINT8 key_gcm[MAX_TESTS][32] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
      0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },
};

UINTN iv_len_gcm[MAX_TESTS] =
{
   12, 12, 12, 12, 8, 60
};

UINT8 iv_index_gcm[MAX_TESTS] =
{
   0, 0, 1, 1, 1, 2
};

UINT8 iv_gcm[MAX_TESTS][64] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00 },
    { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
      0xde, 0xca, 0xf8, 0x88 },
    { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
      0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
      0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
      0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
      0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
      0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
      0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
      0xa6, 0x37, 0xb3, 0x9b },
};

UINTN add_len_gcm[MAX_TESTS] =
{
   0, 0, 0, 20, 20, 20
};

UINT8 add_index_gcm[MAX_TESTS] =
{
   0, 0, 0, 1, 1, 1
};

UINT8 additional_gcm[MAX_TESTS][64] =
{
    { 0x00 },
    { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
      0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
      0xab, 0xad, 0xda, 0xd2 },
};

UINTN pt_len_gcm[MAX_TESTS] =
{
   0, 16, 64, 60, 60, 60
};

UINT8 pt_index_gcm[MAX_TESTS] =
{
   0, 0, 1, 1, 1, 1
};

UINT8 pt_gcm[MAX_TESTS][64] =
{
   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
      0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
      0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
      0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
      0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
      0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
      0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
      0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },
};

UINT8 ct_gcm[MAX_TESTS * 3][64] =
{
   { 0x00 },
   { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
      0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },
   { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },
   { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91 },
   { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
      0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
      0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
      0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
      0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
      0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
      0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
      0xc2, 0x3f, 0x45, 0x98 },
   { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
      0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
      0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
      0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
      0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
      0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
      0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
      0x4c, 0x34, 0xae, 0xe5 },
   { 0x00 },
   { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
      0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },
   { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
      0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },
   { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
      0xcc, 0xda, 0x27, 0x10 },
   { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
      0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
      0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
      0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
      0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
      0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
      0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
      0xa0, 0xf0, 0x62, 0xf7 },
   { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
      0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
      0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
      0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
      0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
      0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
      0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
      0xe9, 0xb7, 0x37, 0x3b },
   { 0x00 },
   { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
      0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },
   { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
      0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },
   { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
      0xbc, 0xc9, 0xf6, 0x62 },
   { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
      0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
      0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
      0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
      0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
      0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
      0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
      0xf4, 0x7c, 0x9b, 0x1f },
   { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
      0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
      0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
      0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
      0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
      0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
      0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
      0x44, 0xae, 0x7e, 0x3f },
};

UINT8 tag_gcm[MAX_TESTS * 3][16] =
{
   { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
      0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },
   { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
      0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },
   { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
      0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },
   { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
      0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },
   { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
      0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },
   { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
      0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },
   { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
      0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },
   { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
      0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },
   { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
      0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },
   { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
      0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },
   { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
      0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },
   { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
      0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },
   { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
      0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },
   { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
      0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },
   { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
      0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },
   { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
      0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },
   { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
      0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },
   { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
      0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },
};

/* AES-GCM test data from NIST public test vectors */
UINT8 gcm_key_256[] = {
  0xee, 0xbc, 0x1f, 0x57, 0x48, 0x7f, 0x51, 0x92,
  0x1c, 0x04, 0x65, 0x66, 0x5f, 0x8a, 0xe6, 0xd1,
  0x65, 0x8b, 0xb2, 0x6d, 0xe6, 0xf8, 0xa0, 0x69,
  0xa3, 0x52, 0x02, 0x93, 0xa5, 0x72, 0x07, 0x8f
};

UINT8 gcm_iv_256[] = {
  0x99, 0xaa, 0x3e, 0x68, 0xed, 0x81, 0x73, 0xa0,
  0xee, 0xd0, 0x66, 0x84
};

UINT8 gcm_pt_256[] = {
  0xf5, 0x6e, 0x87, 0x05, 0x5b, 0xc3, 0x2d, 0x0e,
  0xeb, 0x31, 0xb2, 0xea, 0xcc, 0x2b, 0xf2, 0xa5
};

UINT8 gcm_aad_256[] = {
  0x4d, 0x23, 0xc3, 0xce, 0xc3, 0x34, 0xb4, 0x9b,
  0xdb, 0x37, 0x0c, 0x43, 0x7f, 0xec, 0x78, 0xde
};

UINT8 gcm_ct_256[] = {
  0xf7, 0x26, 0x44, 0x13, 0xa8, 0x4c, 0x0e, 0x7c,
  0xd5, 0x36, 0x86, 0x7e, 0xb9, 0xf2, 0x17, 0x36
};

UINT8 gcm_tag_256[] = {
  0x67, 0xba, 0x05, 0x10, 0x26, 0x2a, 0xe4, 0x87,
  0xd7, 0x37, 0xee, 0x62, 0x98, 0xf7, 0x7e, 0x0c
};

#endif /* CIPHER_APP_TEST_VECTORS_H */
